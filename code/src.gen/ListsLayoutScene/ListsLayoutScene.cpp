// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --
//
// THE CONTENTS OF THIS FILE IS GENERATED BY CODE AND
// ANY MODIFICATIONS WILL BE OVERWRITTEN
//
// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --

// %BANNER_BEGIN%
// ---------------------------------------------------------------------
// %COPYRIGHT_BEGIN%
//
// Copyright (c) 2018 Magic Leap, Inc. All Rights Reserved.
// Use of this file is governed by the Creator Agreement, located
// here: https://id.magicleap.com/creator-terms
//
// %COPYRIGHT_END%
// ---------------------------------------------------------------------
// %BANNER_END%

// %SRC_VERSION%: 1

#include <SceneDescriptor.h>
#include <SpawnedSceneBase.h>
#include <ListsLayoutScene/ListsLayoutScene.h>
#include <ListsLayoutScene/eclipseLabel1/EmergLabel.h>
#include <ListsLayoutScene/SSSL_EmergencyList/SingleSelectSingleLevelHandlers.h>
#include <ListsLayoutScene/SSSL_EmergencyList/EmergHandler.h>
#include <ListsLayoutScene/helpEclipseLabel/helpLabelHandler.h>
#include <ListsLayoutScene/helpList/helpListHandler.h>
#include <ListsLayoutScene/foodEclipseButton/TextWithIconOutlinedButtonHandlers.h>
#include <ListsLayoutScene/BES_Label6/TextWithIconOutlinedLabelHandler.h>
#include <ListsLayoutScene/washroomEclipseBut/washroomButtonHandler.h>
#include <ListsLayoutScene/washroomEclipseLabel/washroomLabelHandler.h>

namespace scenes {

  namespace ListsLayoutScene {

    SpawnedScene::SpawnedScene(const SceneDescriptor& sceneDescriptor, lumin::Node* root)
    : SpawnedSceneBase(sceneDescriptor, root) {
      eclipseLabel1 = lumin::ui::UiText::CastFrom(root->findChild(externalNodes::eclipseLabel1));
      SSSL_EmergencyList = lumin::ui::UiDropDownList::CastFrom(root->findChild(externalNodes::SSSL_EmergencyList));
      helpEclipseLabel = lumin::ui::UiText::CastFrom(root->findChild(externalNodes::helpEclipseLabel));
      helpList = lumin::ui::UiDropDownList::CastFrom(root->findChild(externalNodes::helpList));
      foodEclipseButton = lumin::ui::UiButton::CastFrom(root->findChild(externalNodes::foodEclipseButton));
      BES_Label6 = lumin::ui::UiText::CastFrom(root->findChild(externalNodes::BES_Label6));
      washroomEclipseBut = lumin::ui::UiButton::CastFrom(root->findChild(externalNodes::washroomEclipseBut));
      washroomEclipseLabel = lumin::ui::UiText::CastFrom(root->findChild(externalNodes::washroomEclipseLabel));
    }

    SpawnedScene::~SpawnedScene() {
    }

    SpawnedSceneBase* createSpawnedScene(const SceneDescriptor& sceneDescriptor, lumin::Node* root) {
      using namespace externalNodes;
      SpawnedScene* spawnedScene = new SpawnedScene(sceneDescriptor, root);
      return spawnedScene;
    }

    class Handlers : public SpawnedSceneHandlers
    {
    public:
      Handlers(SpawnedScene& ss);

    private:

      struct eclipseLabel1Handlers {
        eclipseLabel1Handlers(SpawnedScene& ss);
        ::scenes::ListsLayoutScene::handlers::eclipseLabel1::EmergLabel EmergLabel_;
      };
      eclipseLabel1Handlers eclipseLabel1Handlers_;
      struct SSSL_EmergencyListHandlers {
        SSSL_EmergencyListHandlers(SpawnedScene& ss);
        ::scenes::ListsLayoutScene::handlers::SSSL_EmergencyList::SingleSelectSingleLevelHandlers SingleSelectSingleLevelHandlers_;
        ::scenes::ListsLayoutScene::handlers::SSSL_EmergencyList::EmergHandler EmergHandler_;
      };
      SSSL_EmergencyListHandlers SSSL_EmergencyListHandlers_;
      struct helpEclipseLabelHandlers {
        helpEclipseLabelHandlers(SpawnedScene& ss);
        ::scenes::ListsLayoutScene::handlers::helpEclipseLabel::helpLabelHandler helpLabelHandler_;
      };
      helpEclipseLabelHandlers helpEclipseLabelHandlers_;
      struct helpListHandlers {
        helpListHandlers(SpawnedScene& ss);
        ::scenes::ListsLayoutScene::handlers::helpList::helpListHandler helpListHandler_;
      };
      helpListHandlers helpListHandlers_;
      struct foodEclipseButtonHandlers {
        foodEclipseButtonHandlers(SpawnedScene& ss);
        ::scenes::ListsLayoutScene::handlers::foodEclipseButton::TextWithIconOutlinedButtonHandlers TextWithIconOutlinedButtonHandlers_;
      };
      foodEclipseButtonHandlers foodEclipseButtonHandlers_;
      struct BES_Label6Handlers {
        BES_Label6Handlers(SpawnedScene& ss);
        ::scenes::ListsLayoutScene::handlers::BES_Label6::TextWithIconOutlinedLabelHandler TextWithIconOutlinedLabelHandler_;
      };
      BES_Label6Handlers BES_Label6Handlers_;
      struct washroomEclipseButHandlers {
        washroomEclipseButHandlers(SpawnedScene& ss);
        ::scenes::ListsLayoutScene::handlers::washroomEclipseBut::washroomButtonHandler washroomButtonHandler_;
      };
      washroomEclipseButHandlers washroomEclipseButHandlers_;
      struct washroomEclipseLabelHandlers {
        washroomEclipseLabelHandlers(SpawnedScene& ss);
        ::scenes::ListsLayoutScene::handlers::washroomEclipseLabel::washroomLabelHandler washroomLabelHandler_;
      };
      washroomEclipseLabelHandlers washroomEclipseLabelHandlers_;
    };
    
    Handlers::eclipseLabel1Handlers::eclipseLabel1Handlers(SpawnedScene& ss)
    : EmergLabel_(ss) {
      ss.eclipseLabel1->onUpdateSub(std::bind(&handlers::eclipseLabel1::EmergLabel::onUpdate,
        &EmergLabel_, std::ref(ss), std::placeholders::_1, std::placeholders::_2));
    }
    Handlers::SSSL_EmergencyListHandlers::SSSL_EmergencyListHandlers(SpawnedScene& ss)
    : SingleSelectSingleLevelHandlers_(ss),EmergHandler_(ss) {
      ss.SSSL_EmergencyList->onSelectionChangedSub(std::bind(&handlers::SSSL_EmergencyList::SingleSelectSingleLevelHandlers::onSelectionChanged,
        &SingleSelectSingleLevelHandlers_, std::ref(ss), std::placeholders::_1, std::placeholders::_2));
      ss.SSSL_EmergencyList->onActivateSub(std::bind(&handlers::SSSL_EmergencyList::EmergHandler::onActivate,
        &EmergHandler_, std::ref(ss), std::placeholders::_1));
      ss.SSSL_EmergencyList->onEnabledSub(std::bind(&handlers::SSSL_EmergencyList::EmergHandler::onEnabled,
        &EmergHandler_, std::ref(ss), std::placeholders::_1));
      ss.SSSL_EmergencyList->onPressedSub(std::bind(&handlers::SSSL_EmergencyList::EmergHandler::onPressed,
        &EmergHandler_, std::ref(ss), std::placeholders::_1));
      ss.SSSL_EmergencyList->onHoverEnterSub(std::bind(&handlers::SSSL_EmergencyList::EmergHandler::onHoverEnter,
        &EmergHandler_, std::ref(ss), std::placeholders::_1));
    }
    Handlers::helpEclipseLabelHandlers::helpEclipseLabelHandlers(SpawnedScene& ss)
    : helpLabelHandler_(ss) {
      ss.helpEclipseLabel->onUpdateSub(std::bind(&handlers::helpEclipseLabel::helpLabelHandler::onUpdate,
        &helpLabelHandler_, std::ref(ss), std::placeholders::_1, std::placeholders::_2));
    }
    Handlers::helpListHandlers::helpListHandlers(SpawnedScene& ss)
    : helpListHandler_(ss) {
      ss.helpList->onHoverEnterSub(std::bind(&handlers::helpList::helpListHandler::onHoverEnter,
        &helpListHandler_, std::ref(ss), std::placeholders::_1));
      ss.helpList->onActivateSub(std::bind(&handlers::helpList::helpListHandler::onActivate,
        &helpListHandler_, std::ref(ss), std::placeholders::_1));
      ss.helpList->onSelectionChangedSub(std::bind(&handlers::helpList::helpListHandler::onSelectionChanged,
        &helpListHandler_, std::ref(ss), std::placeholders::_1, std::placeholders::_2));
      ss.helpList->onEnabledSub(std::bind(&handlers::helpList::helpListHandler::onEnabled,
        &helpListHandler_, std::ref(ss), std::placeholders::_1));
      ss.helpList->onUpdateSub(std::bind(&handlers::helpList::helpListHandler::onUpdate,
        &helpListHandler_, std::ref(ss), std::placeholders::_1, std::placeholders::_2));
    }
    Handlers::foodEclipseButtonHandlers::foodEclipseButtonHandlers(SpawnedScene& ss)
    : TextWithIconOutlinedButtonHandlers_(ss) {
      ss.foodEclipseButton->onHoverEnterSub(std::bind(&handlers::foodEclipseButton::TextWithIconOutlinedButtonHandlers::onHoverEnter,
        &TextWithIconOutlinedButtonHandlers_, std::ref(ss), std::placeholders::_1));
      ss.foodEclipseButton->onHoverExitSub(std::bind(&handlers::foodEclipseButton::TextWithIconOutlinedButtonHandlers::onHoverExit,
        &TextWithIconOutlinedButtonHandlers_, std::ref(ss), std::placeholders::_1));
      ss.foodEclipseButton->onActivateSub(std::bind(&handlers::foodEclipseButton::TextWithIconOutlinedButtonHandlers::onActivate,
        &TextWithIconOutlinedButtonHandlers_, std::ref(ss), std::placeholders::_1));
      ss.foodEclipseButton->onLongPressSub(std::bind(&handlers::foodEclipseButton::TextWithIconOutlinedButtonHandlers::onLongPress,
        &TextWithIconOutlinedButtonHandlers_, std::ref(ss), std::placeholders::_1));
    }
    Handlers::BES_Label6Handlers::BES_Label6Handlers(SpawnedScene& ss)
    : TextWithIconOutlinedLabelHandler_(ss) {
      ss.BES_Label6->onUpdateSub(std::bind(&handlers::BES_Label6::TextWithIconOutlinedLabelHandler::onUpdate,
        &TextWithIconOutlinedLabelHandler_, std::ref(ss), std::placeholders::_1, std::placeholders::_2));
    }
    Handlers::washroomEclipseButHandlers::washroomEclipseButHandlers(SpawnedScene& ss)
    : washroomButtonHandler_(ss) {
      ss.washroomEclipseBut->onHoverEnterSub(std::bind(&handlers::washroomEclipseBut::washroomButtonHandler::onHoverEnter,
        &washroomButtonHandler_, std::ref(ss), std::placeholders::_1));
      ss.washroomEclipseBut->onHoverExitSub(std::bind(&handlers::washroomEclipseBut::washroomButtonHandler::onHoverExit,
        &washroomButtonHandler_, std::ref(ss), std::placeholders::_1));
      ss.washroomEclipseBut->onActivateSub(std::bind(&handlers::washroomEclipseBut::washroomButtonHandler::onActivate,
        &washroomButtonHandler_, std::ref(ss), std::placeholders::_1));
      ss.washroomEclipseBut->onLongPressSub(std::bind(&handlers::washroomEclipseBut::washroomButtonHandler::onLongPress,
        &washroomButtonHandler_, std::ref(ss), std::placeholders::_1));
    }
    Handlers::washroomEclipseLabelHandlers::washroomEclipseLabelHandlers(SpawnedScene& ss)
    : washroomLabelHandler_(ss) {
      ss.washroomEclipseLabel->onUpdateSub(std::bind(&handlers::washroomEclipseLabel::washroomLabelHandler::onUpdate,
        &washroomLabelHandler_, std::ref(ss), std::placeholders::_1, std::placeholders::_2));
    }
    
    Handlers::Handlers(SpawnedScene& ss)
    : SpawnedSceneHandlers(ss),
      eclipseLabel1Handlers_(ss),
      SSSL_EmergencyListHandlers_(ss),
      helpEclipseLabelHandlers_(ss),
      helpListHandlers_(ss),
      foodEclipseButtonHandlers_(ss),
      BES_Label6Handlers_(ss),
      washroomEclipseButHandlers_(ss),
      washroomEclipseLabelHandlers_(ss)
      {
    }
    
    SpawnedSceneHandlers* createSpawnedSceneHandlers(SpawnedSceneBase& ssb) {
      return new Handlers(static_cast<SpawnedScene&>(ssb));
    }
  }
}

